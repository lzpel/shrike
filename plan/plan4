
#ファイル構成
plan
	plan1
	plan2
	plan3
static
	custom.js
	home.png
	home.xcf
	homebase.png
	icon.png
template
	__init__.py
	appengine.py
	filter.py
	request.py
	util.py
app.yaml
base.html
clone.sh
deploy.sh
gae.py
home.html
index.yaml
sitemap.xml
test.html
#server
category = {name:{"namejp": namejp, "namech": namech} for name, namejp, namech in (i.split() for i in category.split(";"))}

def translate(text, target):
	r = request.post("https://translation.googleapis.com/language/translate/v2", {"q": text, "target": target, "format": "text", "key": "AIzaSyCXiPjrIvSkxVUydLlfZIjm6QEiwA9dxLU"}, datatype="json")
	return "".join(i["translatedText"] for i in r["data"]["translations"])


def hash(hash):
	return hashlib.sha224("233ch.net" + str(hash)).hexdigest()[:6]


def sendvalidation(email):
	code=hash(email)
	sendmail(to=email, subject="【233ch.net】your validation code is {0}".format(code), body="validation code:{0}\n\nThanks for using the site".format(code))

class unit
	def format(self)
		return {name,image,idnamejp,namech,textjp,textch}
	def storequery(self,work):
		self.detail={namejp:work.namejp,namech,textjp,textch}
	def storeindex(self,work):
		self.detail={namejp:work.namejp,namech,textjp,textch}
	def getgramtext(self):
class work
	def auth()
		params.update(user,target)
	def stateformat(self, source):
		return json.dumps(source)

	def work
		if "/translate"
		if "/sitemap"
			s.write_temp("sitemap.xml", contenttype="application/xml")
		if "/"
			s.params.update({"state":s.stateformat({"account":1, "channellist":1, "channellist":1, "channel":s.channel, "category":1})})
			s.write_temp("home.html")
		if "/sign"
			if action="ma"
			if action="in"
				{"account"} or 400
			if action="up"
				{"account"} or 400
			if action="out"
				{"account",None}
		if "/channel"
			if action="new"
				unit().store(work).put()
				return {"channel"} or 400="not login"
			if action="del"
				return {"channel"}
			if action="set":
				return {"channel"} or 400="not login"
			else:
				query.fetch
				return {"channellist"}
		if "/message"
			if action="new"
				unit().store(work).put()
				return {"channel","messagelist"} or 400="not login"
			if action="del"
				return {"channel","messagelist"}
			if action="set":
				unit().store(work).put()
				return {"channel","messagelist"} or 400="not login"
			else:
				return {"channel","messagelist"}
		if "/user"
			write_json({id:{}}) or 400
#base.html
state={
	account:{}
	channellist:[]
	channel:[]
	messagelist:[]
	category:{}
	language:"jp",
	userlist:{}
}
#custom.js
function httpsend(url,param,onload){}
function closemodal(){}
function movechannel(){}
function update()
Vue.component('imageinput',{props: ["language","model"]})
Vue.component('translation',{props:["language","model","name"]})
Vue.component('ranking',{props:["order","language","channellist","category"]})
Vue.component('channel',{props:["language","channel","category","messagelist"]}
Vue.component('modal',{props:["state"]}
work=new vue()
#html
ジャンルの右のボタンを押すとチャンネル作成モーダルがでる
